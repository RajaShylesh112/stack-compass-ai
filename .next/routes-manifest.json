{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/404",
      "regex": "^/404(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/404(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/ai-recommendations",
      "regex": "^/ai\\-recommendations(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/ai\\-recommendations(?:/)?$"
    },
    {
      "page": "/analytics",
      "regex": "^/analytics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/analytics(?:/)?$"
    },
    {
      "page": "/compare",
      "regex": "^/compare(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compare(?:/)?$"
    },
    {
      "page": "/compare/stack",
      "regex": "^/compare/stack(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compare/stack(?:/)?$"
    },
    {
      "page": "/compare/tech",
      "regex": "^/compare/tech(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compare/tech(?:/)?$"
    },
    {
      "page": "/compare/tools",
      "regex": "^/compare/tools(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compare/tools(?:/)?$"
    },
    {
      "page": "/insights/compatibility",
      "regex": "^/insights/compatibility(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/insights/compatibility(?:/)?$"
    },
    {
      "page": "/resources/analytics",
      "regex": "^/resources/analytics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/analytics(?:/)?$"
    },
    {
      "page": "/resources/best-practices",
      "regex": "^/resources/best\\-practices(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/best\\-practices(?:/)?$"
    },
    {
      "page": "/resources/compatibility",
      "regex": "^/resources/compatibility(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/compatibility(?:/)?$"
    },
    {
      "page": "/resources/docs",
      "regex": "^/resources/docs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/docs(?:/)?$"
    },
    {
      "page": "/resources/learn",
      "regex": "^/resources/learn(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/learn(?:/)?$"
    },
    {
      "page": "/resources/stack-builder",
      "regex": "^/resources/stack\\-builder(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/stack\\-builder(?:/)?$"
    },
    {
      "page": "/resources/workspace",
      "regex": "^/resources/workspace(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/resources/workspace(?:/)?$"
    },
    {
      "page": "/stack-builder",
      "regex": "^/stack\\-builder(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/stack\\-builder(?:/)?$"
    },
    {
      "page": "/stacks",
      "regex": "^/stacks(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/stacks(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": [
    {
      "source": "/api/:path*",
      "destination": "http://localhost:4000/api/:path*",
      "regex": "^/api(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    }
  ]
}